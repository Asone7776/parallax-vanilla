{"version":3,"sources":["../../src/js/parallax-vanilla.js"],"names":["test","require","defineParallaxVanilla","videoExtensions","pv","stringOfIntegers","arg","transform","element","style","webkitTransform","MozTransform","msTransform","OTransform","paraArr","windowProps","scrollTop","window","scrollY","windowHeight","innerHeight","windowMidHeight","updateWindowProps_OnRaf","document","documentElement","updateWindowProps_OnResize","offsetTop","rectTop","el","getBoundingClientRect","top","pageYOffset","init","defaultSettings","container","class","height","block","speed","Math","PI","mediatype","mediapath","undefined","settings","toLowerCase","containers","getElementsByClassName","i","length","obj","offset","attrContainerHeight","getAttribute","suffix","substr","Error","clientHeight","blocks","j","attrSpeed","attrMediaPath","attrMediaType","isVideo","videoEl","createElement","src","autoPlay","type","extension","loop","muted","appendChild","isPlaying","play","backgroundImage","console","error","backgroundImageFromDOM","getComputedStyle","getPropertyValue","scrollDist","paddingBottom","abs","setProperty","push","isInViewport","getExtension","lastIndexOf","log","indexOf","translate","containerObj","calc","round","firstChild","pause","onresize","raf","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","callback","setTimeout","updateLoop"],"mappings":"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","file":"parallax-vanilla.js","sourcesContent":["const test = require('./test')\ntest()\n;(window => {\n  /**\n   * Defines pv\n   * @return {Object} pv object\n   */\n  const defineParallaxVanilla = () => {\n    const videoExtensions = [\n      '3g2',\n      '3gp',\n      'asf',\n      'avi',\n      'flv',\n      'h264',\n      'm4v',\n      'mov',\n      'mp4',\n      'mpg',\n      'mpeg',\n      'rm',\n      'srt',\n      'swf',\n      'vow',\n      'vob',\n      'wmv',\n    ]\n\n    /**\n  \t * [Library object]\n  \t * @type {Object}\n  \t */\n    let pv = {}\n\n    /**\n  \t * Checks if String argument consists exclusively of numbers\n  \t * @param  {String}  arg String to check\n  \t * @return {Boolean}     True if String consists exclusively of numbers\n  \t */\n    pv.stringOfIntegers = arg => {\n      return /^[0-9]+$/.test(arg)\n    }\n\n    /**\n\t\t * Transform prefixes for CSS\n\t\t * @param  {HTML-element} element A para-block element\n\t\t * @param  {CSS-style} style   E.g. 'transform3d(x, y, z)'\n\t\t */\n    pv.transform = (element, style) => {\n      element.style.webkitTransform = style\n      element.style.MozTransform = style\n      element.style.msTransform = style\n      element.style.OTransform = style\n      element.style.transform = style\n    }\n\n    /**\n\t\t * Primary data handler for containers and blocks.\n\t\t * @type {Array}\n\t\t * @structure\n\t\t * paraArr = [\n\t\t * \tobj : {\n\t\t * \t\tcontainer : {\n\t\t * \t\t\tel : HTML-element,\n\t\t * \t\t\toffset : offsetTop,\n\t\t * \t\t\theight : clientHeight\n\t\t * \t\t},\n\t\t * \t\tblocks : [\n\t\t * \t\t\tblock : {\n\t\t * \t\t\t\tel : HTML-element,\n\t\t * \t\t\t\tspeed : getAttr('pv-speed')\n     *        mediatype: getAttr('pv-mediatype'),\n     *        mediapath: getAttr('pv-mediapath'),\n\t\t * \t\t\t}\n\t\t * \t\t]\n\t\t * \t}\n\t\t * ]\n\t\t */\n    pv.paraArr = []\n\n    /**\n  \t * Window properties\n  \t * @type {Object}\n  \t */\n    pv.windowProps = {\n      scrollTop: window.scrollY,\n      windowHeight: window.innerHeight,\n      windowMidHeight: window.innerHeight / 2,\n    }\n\n    /**\n\t\t * Update selected attributes in windowProps on window raf event\n\t\t */\n    pv.updateWindowProps_OnRaf = () => {\n      pv.windowProps.scrollTop = window.scrollY || document.documentElement.scrollTop\n    }\n\n    /**\n\t\t * Update selected attributes in pv.windowProps on window resize event\n\t\t */\n    pv.updateWindowProps_OnResize = () => {\n      pv.windowProps.scrollTop = window.scrollY || document.documentElement.scrollTop\n      pv.windowProps.windowHeight = window.innerHeight\n      pv.windowProps.windowMidHeight = window.innerHeight / 2\n    }\n\n    /**\n\t\t * Calculates the top offset from an element to the window's || document's top\n\t\t * @param  {HTML-element} el A pv-block element\n\t\t * @return {Int}    The element's top offset to document.\n\t\t * Link: https://plainjs.com/javascript/styles/get-the-position-of-an-element-relative-to-the-document-24/\n\t\t */\n    pv.offsetTop = el => {\n      let rectTop = el.getBoundingClientRect().top,\n        scrollTop = window.pageYOffset || document.documentElement.scrollTop\n      return rectTop + scrollTop\n    }\n\n    /**\n\t\t * Initialize pv.paraArr\n\t\t * @param  {Object} settings User settings\n\t\t */\n    pv.init = settings => {\n      const defaultSettings = {\n        container: {\n          class: 'pv-container',\n          height: '250px',\n        },\n        block: {\n          class: 'pv-block',\n          speed: -Math.PI,\n          mediatype: 'image',\n          mediapath: undefined,\n        },\n      }\n\n      settings = settings || defaultSettings\n      settings.container = settings.container || defaultSettings.container\n      settings.container.class = settings.container.class\n        ? settings.container.class.toLowerCase()\n        : defaultSettings.container.class\n      settings.container.height = settings.container.height || defaultSettings.container.height\n      settings.block = settings.block || defaultSettings.block\n      settings.block.class = settings.block.class\n        ? settings.block.class.toLowerCase()\n        : defaultSettings.block.class\n      settings.block.speed = settings.block.speed || defaultSettings.block.speed\n      settings.block.mediatype = settings.block.mediatype\n        ? settings.block.mediatype.toLowerCase()\n        : defaultSettings.block.mediatype\n      settings.block.mediapath = settings.block.mediapath || defaultSettings.block.mediapath\n\n      const containers = document.getElementsByClassName(settings.container.class)\n      for (let i = 0; i < containers.length; i++) {\n        let obj = {}\n        let container = {}\n\n        container.el = containers[i]\n        container.offset = pv.offsetTop(container.el)\n\n        let attrContainerHeight = container.el.getAttribute('pv-height')\n        if (attrContainerHeight == null) {\n          container.el.style.height = settings.container.height\n        } else {\n          if (pv.stringOfIntegers(attrContainerHeight)) {\n            // string only consists of integers, add px\n            container.el.style.height = attrContainerHeight + 'px'\n          } else {\n            // string has more than integers, assume suffix is either px or vh\n            let suffix = attrContainerHeight.substr(\n              attrContainerHeight.length - 2,\n              attrContainerHeight.length\n            )\n            if (suffix == 'px' || suffix == 'vh') {\n              container.el.style.height = attrContainerHeight\n            } else {\n              throw new Error('Invalid height')\n            }\n          }\n        }\n\n        container.height = container.el.clientHeight\n\n        obj.container = container\n\n        obj.blocks = []\n        const blocks = containers[i].getElementsByClassName(settings.block.class)\n        for (let j = 0; j < blocks.length; j++) {\n          let block = {}\n          block.el = blocks[j]\n\n          const attrSpeed = block.el.getAttribute('pv-speed')\n          if (attrSpeed == null) {\n            block.speed = settings.block.speed\n          } else {\n            if (attrSpeed == 0 || attrSpeed == 0.0) {\n              block.speed = settings.block.speed\n            } else {\n              block.speed = attrSpeed\n            }\n          }\n\n          const attrMediaPath = block.el.getAttribute('pv-mediapath')\n\n          // if (extension === -1) return console.error('Media files must have an extension')\n\n          const attrMediaType = block.el.getAttribute('pv-mediatype')\n          if (attrMediaPath) {\n            block.mediapath = attrMediaPath\n            if (attrMediaType) block.mediatype = attrMediaType\n            if (pv.isVideo(attrMediaType, attrMediaPath)) {\n              let videoEl = document.createElement('video')\n              videoEl.src = attrMediaPath\n              videoEl.autoPlay = true\n              videoEl.type = 'video/' + extension\n              videoEl.loop = true\n              videoEl.muted = true\n              block.el.appendChild(videoEl)\n              block.isPlaying = true\n              videoEl.play()\n            } else {\n              block.el.style.backgroundImage = \"url('\" + attrMediaPath + \"')\"\n            }\n          } else {\n            console.error('Mediapath undefined for pv-block: ', block.el)\n          }\n\n          const backgroundImageFromDOM = window\n            .getComputedStyle(block.el)\n            .getPropertyValue('background-image')\n\n          // if the pv-block for some reason does not have any image\n          if (block.mediatype === 'image' && backgroundImageFromDOM == 'none') return\n\n          // calculates the negative top property\n          // negative scroll distance\n          // plus container height / factor, because whenever we pass the element we'll always scroll the window faster then the animation (if factor < 1 it'll be increased to all is good)\n          let top = 0\n          let scrollDist = 0\n          let paddingBottom = 0\n\n          // if the pv-block offset is less than the windowheight, then the scrolldist will have to be recalculated\n          if (container.offset < pv.windowProps.windowHeight) {\n            scrollDist = (container.height + container.offset) / Math.abs(block.speed)\n\n            if (block.speed > 0) {\n              top = -Math.abs(container.offset)\n              paddingBottom = container.height + container.offset\n            } else {\n              paddingBottom = scrollDist + container.height\n            }\n\n            // the pv-block is below the initial windowheight\n          } else {\n            scrollDist = (container.height + pv.windowProps.windowHeight) / Math.abs(block.speed)\n            paddingBottom = scrollDist + container.height\n\n            if (block.speed > 0) {\n              top = -scrollDist\n              paddingBottom = container.height + pv.windowProps.windowHeight / Math.abs(block.speed)\n            } else {\n              paddingBottom = scrollDist + container.height\n            }\n          }\n\n          if (Math.abs(top) >= Math.abs(paddingBottom)) paddingBottom = Math.abs(top) + 1\n\n          block.el.style.setProperty('padding-bottom', paddingBottom + 'px', null)\n          block.el.style.setProperty('margin-top', top + 'px', null)\n\n          obj.blocks.push(block)\n        } // end of for blocks\n\n        pv.paraArr.push(obj)\n      } // loop container\n      // pp(\"pv.paraArr\", pv.paraArr)\n    }\n\n    // checks if the parallax image is in viewport.\n    pv.isInViewport = (offset, height) => {\n      return (\n        pv.windowProps.scrollTop + pv.windowProps.windowHeight - offset > 0 &&\n        pv.windowProps.scrollTop < offset + height\n      )\n    }\n\n    pv.getExtension = attrMediaPath => {\n      const extension = attrMediaPath\n        .substr(attrMediaPath.lastIndexOf('.') + 1, attrMediaPath.length)\n        .toLowerCase()\n      extension === -1 ? console.log('Invalid extension') : extension\n    }\n\n    // returns {true} if media is a video\n    pv.isVideo = (attrMediaType, attrMediaPath) => {\n      return (\n        attrMediaType === 'video' || videoExtensions.indexOf(pv.getExtension(attrMediaPath)) !== -1\n      )\n    }\n\n    // translates the parallax blocks, creating the effect\n    pv.translate = () => {\n      // loop parallax blocks\n      for (let i = 0; i < pv.paraArr.length; i++) {\n        const containerObj = pv.paraArr[i].container\n        let calc\n\n        // check if parallax block is in viewport\n        if (pv.isInViewport(containerObj.offset, containerObj.height)) {\n          // if any parallax is within the first windowheight, transform from 0 (pv.scrollTop)\n          if (containerObj.offset < pv.windowProps.windowHeight) {\n            calc = pv.windowProps.scrollTop\n\n            // if the parallax is further down on the page\n            // calculate windowheight - parallax offset + scrollTop to start from 0 whereever it appears\n          } else {\n            calc = pv.windowProps.windowHeight - containerObj.offset + pv.windowProps.scrollTop\n          }\n\n          for (let j = 0; j < pv.paraArr[i].blocks.length; j++) {\n            const block = pv.paraArr[i].blocks[j]\n            // if (!block.isPlaying) block.el.firstChild.play() // IF IS VIDEO\n\n            // perform the transform\n            pv.transform(block.el, 'translate3d(0,' + Math.round(calc / block.speed) + 'px, 0)')\n          } // end of for blocks\n        } else {\n          // pause blocks with video\n          for (let j = 0; j < pv.paraArr[i].blocks.length; j++) {\n            let block = pv.paraArr[i].blocks[j]\n            if (block.isPlaying) block.el.firstChild.pause()\n          }\n        } // end of isInViewport if\n      } // end of for container\n    } // translate\n\n    // window resize event\n    /**\n\t   * Window on resize event, updates pv.windowProps\n\t   */\n    window.onresize = () => {\n      pv.updateWindowProps_OnResize()\n      pv.init()\n    }\n\n    /**\n\t\t * Request animation frame\n\t\t * Binds function to window\n\t\t */\n    window.raf = (() => {\n      return (\n        window.requestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        function(callback) {\n          window.setTimeout(callback, 1000 / 60) // 60 FPS\n        }\n      )\n    })()\n\n    /**\n\t\t * Main loop for updating variables and performing translates\n\t\t */\n    const updateLoop = () => {\n      pv.updateWindowProps_OnRaf()\n      pv.translate()\n      raf(updateLoop)\n    }\n\n    /**\n\t\t * Initialize main loop\n\t\t */\n    raf(updateLoop)\n\n    /**\n\t\t * Returns the library\n\t\t */\n    return pv\n  } // end of define_pv()\n\n  /**\n   * Define pv to window if not already done\n   */\n  if (typeof pv === 'undefined') {\n    window.pv = defineParallaxVanilla()\n    console.log('%c parallax-vanilla defined.', 'color: green')\n  } else {\n    console.log('%c parallax-vanilla already defined.', 'color: red')\n  }\n})(window)\n"]}